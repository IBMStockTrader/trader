#Deploy the pod
apiVersion: v1
kind: DeploymentConfig
metadata:
  name: trader
  labels:
    app: stock-trader
  annotations:
    prism.subkind: Liberty
spec:
  replicas: 2
  triggers:
    - type: "ConfigChange"
    - type: "ImageChange"
      imageChangeParams:
        automatic: true
        containerNames:
          - "trader"
        from:
          kind: "ImageStreamTag"
          name: "stocktrader-trader:latest"
          namespace: "stock-trader"
  template:
    metadata:
      labels:
        app: trader
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9080"
    spec:
      containers:
      - name: trader
#       Note: this manifests/deploy.yaml will be used when we want to deploy this directly using kubectl.
#             Microclimate uses the Charts folder so we can actually have both options
        #image: ibmstocktrader/trader:basicregistry # Docker Hub with basic registry sign in
        image: docker-registry.default.svc:5000/stock-trader/stocktrader-trader:latest # OCP
        #image: mycluster.icp:8500/stock-trader/trader:latest # IBM Cloud Private
        #image: registry.ng.bluemix.net/stock_trader/trader:latest # IBM Kubernetes Service
        env:
          - name: JWT_AUDIENCE
            valueFrom:
              secretKeyRef:
                name: jwt
                key: audience
          - name: JWT_ISSUER
            valueFrom:
              secretKeyRef:
                name: jwt
                key: issuer
          - name: WLP_LOGGING_CONSOLE_FORMAT
            value: json
          - name: WLP_LOGGING_CONSOLE_SOURCE
            value: message,ffdc
          - name: OIDC_NAME
            valueFrom:
              secretKeyRef:
                name: oidc
                key: name
                optional: true
          - name: OIDC_ISSUER
            valueFrom:
              secretKeyRef:
                name: oidc
                key: issuer
                optional: true
          - name: OIDC_AUTH
            valueFrom:
              secretKeyRef:
                name: oidc
                key: auth
                optional: true
          - name: OIDC_TOKEN
            valueFrom:
              secretKeyRef:
                name: oidc
                key: token
                optional: true
          - name: OIDC_ID
            valueFrom:
              secretKeyRef:
                name: oidc
                key: id
                optional: true
          - name: OIDC_SECRET
            valueFrom:
              secretKeyRef:
                name: oidc
                key: secret
                optional: true
          - name: OIDC_KEY
            valueFrom:
              secretKeyRef:
                name: oidc
                key: key
                optional: true
          - name: OIDC_NODEPORT
            valueFrom:
              secretKeyRef:
                name: oidc
                key: nodeport
                optional: true
          - name: PORTFOLIO_URL
            valueFrom:
              configMapKeyRef:
                name: urls
                key: portfolio
                optional: true
        ports:
          - containerPort: 9080
          - containerPort: 9443
        imagePullPolicy: Always
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 9080
          initialDelaySeconds: 30
          periodSeconds: 15
          successThreshold: 1
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /health/live
            port: 9080
          initialDelaySeconds: 60
          periodSeconds: 15
          successThreshold: 1
          failureThreshold: 5 # Allow a little time to exec into the pod to grab FFDCs before it's killed
        resources:
          limits:
            cpu: 500m
            memory: 500Mi
          requests:
            cpu: 100m
            memory: 128Mi
---
#Deploy the autoscaler
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: trader-hpa
  labels:
    solution: stock-trader
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: trader
  maxReplicas: 10
  minReplicas: 2
  targetCPUUtilizationPercentage: 60
---
#Deploy the service
apiVersion: v1
kind: Service
metadata:
  name: trader-service
  labels:
    app: trader
    solution: stock-trader
spec:
  type: NodePort
  ports:
    - name: http
      protocol: TCP
      port: 9080
      targetPort: 9080
    - name: https
      protocol: TCP
      port: 9443
      targetPort: 9443
  selector:
    app: trader
---
#Configure the ingress
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: trader-ingress
  labels:
    solution: stock-trader
  annotations:
    #kubernetes.io/ingress.class: "istio"
    #ingress.kubernetes.io/rewrite-target: /trader
    kubernetes.io/ingress.class: "nginx"
    ingress.kubernetes.io/affinity: "cookie"
    ingress.kubernetes.io/session-cookie-name: "route"
    ingress.kubernetes.io/session-cookie-hash: "sha1"
    #ingress.kubernetes.io/rewrite-target: /
    ingress.kubernetes.io/secure-backends: "true"
    #ingress.kubernetes.io/app-root: "/trader"
spec:
  rules:
  - host:
    http:
      paths:
      - path: /trader
        backend:
          serviceName: trader-service
          servicePort: 9443
